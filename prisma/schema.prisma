generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Issue {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String
  status      Status   @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  users       UserIssues[]
}


model User {
  id                  String       @id @default(cuid())
  name                String?
  email               String?      @unique
  image               String?
  password            String?
  emailVerified       DateTime?
  accounts            Account[]
  friends             UserFriends[] @relation("User")
  friendOf            UserFriends[] @relation("Friend")      
  sentInvitations     Invitation[] @relation("SentInvitations")
  recievedInvitations Invitation[] @relation("RecievedInvitations")
  issues              UserIssues[]
}

model UserIssues {
  userId String
  issueId Int
  User   User  @relation(fields: [userId], references: [id])
  Issue  Issue @relation(fields: [issueId], references: [id])
  @@id([userId, issueId])
  @@index([userId])
  @@index([issueId])

}

model UserFriends {
  userId String
  User   User   @relation("User",fields: [userId], references: [id])
  friendId String
  friend User  @relation("Friend",fields: [friendId], references: [id])
  @@id([userId, friendId])
  @@index([userId])
  @@index([friendId])
}
model Invitation {
  id         String           @id @default(cuid())
  senderId   String
  recieverId String
  status     InvitationStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  sender     User             @relation("SentInvitations", fields: [senderId], references: [id])
  reciever   User             @relation("RecievedInvitations", fields: [recieverId], references: [id])

  @@index([recieverId])
  @@index([senderId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
}
